function ConvertFrom-PsqlExpanded {
<#
.DESCRIPTION
    I was given a series of text files and asked to parse them
    they appear to have been generated by passing an ad-hoc query into 
    psql with the --expanded flag. The following injests & parses 
    log files of this form into a PSCustomObject
.PARAMETER RowDelimiter
    the default value of '^-\[ RECORD.*' matches the whole line of usual output
    note that [-t | --tuples-only] suppresses the rowcounts info message on this line
.EXAMPLE
    # see https://gist.github.com/petervandivier/db2c5f3ca9812d5f92ab90ebd267b9c3#file-make-samples-ps1
    $logs = Get-ChildItem samples | ConvertFrom-PsqlExpanded
#>
    [cmdletbinding()]param(
        [Parameter(ValueFromPipeline)]$file,
        [string]$RowDelimiter = '^-\[ RECORD.*'
    )
    begin{}

    process{
# TODO?: Capture "RECORD _N_" and append _N_ to the hash?
        $textArray = (Get-Content $file -Raw) -Split $RowDelimiter, 0, 'multiline'

        $rows = foreach($textBlob in $textArray[1..($textArray.count)]){
            $csv = $textBlob | ConvertFrom-Csv -Delimiter '|' -Header key,value
# 1 trailing space is getting appended to key names
# think it might be a "just my computer" problem
# but .Trim() is necessary to make things sensible
            $dupes = $csv.key.Trim() | Group-Object | Where-Object Count -gt 1 | Select-Object Count, Name, @{n='Mapped';e={0}}
            
            $hash=@{}

            $csv | ForEach-Object {
                $key = $_.key.Trim()
                if($key -in $dupes.Name){
                    $i = ($dupes | Where-Object Name -eq $key).Mapped += 1
                    $key += $i
                }

                $hash.Add($key, $_.value)
            }

            [PSCustomObject]$hash
        }

        $log = [PSCustomObject]@{
            LogName = (Get-Item $file | Resolve-Path -Relative)
            RowCount = $rows.Count
            Keys = ($rows | Get-Member | Where-Object MemberType -eq NoteProperty).Name
            Data = $rows
            Source = (Get-Item $file)
        }

        $defaultProperties = @('LogName','RowCount','Data')
        $displayProps = New-Object System.Management.Automation.PSPropertySet(‘DefaultDisplayPropertySet’,[string[]]$defaultProperties)
        $PSStandardMembers = [System.Management.Automation.PSMemberInfo[]]$displayProps
        $log | Add-Member -MemberType MemberSet -Name PSStandardMembers -Value $PSStandardMembers

        $log
    }
}